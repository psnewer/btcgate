# coding: utf-8

"""
    Gate API v4

    APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.  # noqa: E501

    OpenAPI spec version: 4.7.3
    Contact: support@mail.gate.io
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from gate_api.api_client import ApiClient


class MarginApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_loan(self, loan_id, currency, **kwargs):  # noqa: E501
        """Cancel lending loan  # noqa: E501

        Only lending loans can be cancelled  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_loan(loan_id, currency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_id: Loan ID (required)
        :param str currency: Retrieved specified currency related data (required)
        :return: Loan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_loan_with_http_info(loan_id, currency, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_loan_with_http_info(loan_id, currency, **kwargs)  # noqa: E501
            return data

    def cancel_loan_with_http_info(self, loan_id, currency, **kwargs):  # noqa: E501
        """Cancel lending loan  # noqa: E501

        Only lending loans can be cancelled  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_loan_with_http_info(loan_id, currency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_id: Loan ID (required)
        :param str currency: Retrieved specified currency related data (required)
        :return: Loan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['loan_id', 'currency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_loan" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in local_var_params or
                local_var_params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `cancel_loan`")  # noqa: E501
        # verify the required parameter 'currency' is set
        if ('currency' not in local_var_params or
                local_var_params['currency'] is None):
            raise ValueError("Missing the required parameter `currency` when calling `cancel_loan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in local_var_params:
            path_params['loan_id'] = local_var_params['loan_id']  # noqa: E501

        query_params = []
        if 'currency' in local_var_params:
            query_params.append(('currency', local_var_params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'api_sign', 'api_timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/margin/loans/{loan_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Loan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_loan(self, loan, **kwargs):  # noqa: E501
        """Lend or borrow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_loan(loan, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Loan loan: (required)
        :return: Loan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_loan_with_http_info(loan, **kwargs)  # noqa: E501
        else:
            (data) = self.create_loan_with_http_info(loan, **kwargs)  # noqa: E501
            return data

    def create_loan_with_http_info(self, loan, **kwargs):  # noqa: E501
        """Lend or borrow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_loan_with_http_info(loan, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Loan loan: (required)
        :return: Loan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['loan']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_loan" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'loan' is set
        if ('loan' not in local_var_params or
                local_var_params['loan'] is None):
            raise ValueError("Missing the required parameter `loan` when calling `create_loan`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'loan' in local_var_params:
            body_params = local_var_params['loan']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'api_sign', 'api_timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/margin/loans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Loan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loan(self, loan_id, side, **kwargs):  # noqa: E501
        """Retrieve one single loan detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loan(loan_id, side, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_id: Loan ID (required)
        :param str side: Lend or borrow (required)
        :return: Loan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loan_with_http_info(loan_id, side, **kwargs)  # noqa: E501
        else:
            (data) = self.get_loan_with_http_info(loan_id, side, **kwargs)  # noqa: E501
            return data

    def get_loan_with_http_info(self, loan_id, side, **kwargs):  # noqa: E501
        """Retrieve one single loan detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loan_with_http_info(loan_id, side, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_id: Loan ID (required)
        :param str side: Lend or borrow (required)
        :return: Loan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['loan_id', 'side']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loan" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in local_var_params or
                local_var_params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `get_loan`")  # noqa: E501
        # verify the required parameter 'side' is set
        if ('side' not in local_var_params or
                local_var_params['side'] is None):
            raise ValueError("Missing the required parameter `side` when calling `get_loan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in local_var_params:
            path_params['loan_id'] = local_var_params['loan_id']  # noqa: E501

        query_params = []
        if 'side' in local_var_params:
            query_params.append(('side', local_var_params['side']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'api_sign', 'api_timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/margin/loans/{loan_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Loan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loan_record(self, loan_record_id, loan_id, **kwargs):  # noqa: E501
        """Get one single loan record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loan_record(loan_record_id, loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_record_id: Loan record ID (required)
        :param str loan_id: Loan ID (required)
        :return: LoanRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loan_record_with_http_info(loan_record_id, loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_loan_record_with_http_info(loan_record_id, loan_id, **kwargs)  # noqa: E501
            return data

    def get_loan_record_with_http_info(self, loan_record_id, loan_id, **kwargs):  # noqa: E501
        """Get one single loan record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loan_record_with_http_info(loan_record_id, loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_record_id: Loan record ID (required)
        :param str loan_id: Loan ID (required)
        :return: LoanRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['loan_record_id', 'loan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loan_record" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'loan_record_id' is set
        if ('loan_record_id' not in local_var_params or
                local_var_params['loan_record_id'] is None):
            raise ValueError("Missing the required parameter `loan_record_id` when calling `get_loan_record`")  # noqa: E501
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in local_var_params or
                local_var_params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `get_loan_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_record_id' in local_var_params:
            path_params['loan_record_id'] = local_var_params['loan_record_id']  # noqa: E501

        query_params = []
        if 'loan_id' in local_var_params:
            query_params.append(('loan_id', local_var_params['loan_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'api_sign', 'api_timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/margin/loan_records/{loan_record_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoanRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_funding_accounts(self, **kwargs):  # noqa: E501
        """Funding account list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_funding_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Retrieved specified currency related data
        :return: list[FundingAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_funding_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_funding_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_funding_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Funding account list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_funding_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Retrieved specified currency related data
        :return: list[FundingAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['currency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_funding_accounts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'currency' in local_var_params:
            query_params.append(('currency', local_var_params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'api_sign', 'api_timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/margin/funding_accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FundingAccount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_funding_book(self, currency, **kwargs):  # noqa: E501
        """Order book of lending loans  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_funding_book(currency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Retrieved specified currency related data (required)
        :return: list[FundingBookItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_funding_book_with_http_info(currency, **kwargs)  # noqa: E501
        else:
            (data) = self.list_funding_book_with_http_info(currency, **kwargs)  # noqa: E501
            return data

    def list_funding_book_with_http_info(self, currency, **kwargs):  # noqa: E501
        """Order book of lending loans  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_funding_book_with_http_info(currency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Retrieved specified currency related data (required)
        :return: list[FundingBookItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['currency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_funding_book" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'currency' is set
        if ('currency' not in local_var_params or
                local_var_params['currency'] is None):
            raise ValueError("Missing the required parameter `currency` when calling `list_funding_book`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'currency' in local_var_params:
            query_params.append(('currency', local_var_params['currency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/margin/funding_book', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FundingBookItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_loan_records(self, loan_id, **kwargs):  # noqa: E501
        """List repayment records of specified loan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_loan_records(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_id: Loan ID (required)
        :param str status: Loan record status
        :param int page: Page number
        :param int limit: Maximum number of record returned in one list
        :return: list[LoanRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_loan_records_with_http_info(loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_loan_records_with_http_info(loan_id, **kwargs)  # noqa: E501
            return data

    def list_loan_records_with_http_info(self, loan_id, **kwargs):  # noqa: E501
        """List repayment records of specified loan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_loan_records_with_http_info(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_id: Loan ID (required)
        :param str status: Loan record status
        :param int page: Page number
        :param int limit: Maximum number of record returned in one list
        :return: list[LoanRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['loan_id', 'status', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_loan_records" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in local_var_params or
                local_var_params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `list_loan_records`")  # noqa: E501

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `list_loan_records`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_loan_records`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_loan_records`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_id' in local_var_params:
            query_params.append(('loan_id', local_var_params['loan_id']))  # noqa: E501
        if 'status' in local_var_params:
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'api_sign', 'api_timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/margin/loan_records', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LoanRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_loan_repayments(self, loan_id, **kwargs):  # noqa: E501
        """List loan repayment records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_loan_repayments(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_id: Loan ID (required)
        :return: list[Repayment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_loan_repayments_with_http_info(loan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_loan_repayments_with_http_info(loan_id, **kwargs)  # noqa: E501
            return data

    def list_loan_repayments_with_http_info(self, loan_id, **kwargs):  # noqa: E501
        """List loan repayment records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_loan_repayments_with_http_info(loan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_id: Loan ID (required)
        :return: list[Repayment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['loan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_loan_repayments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in local_var_params or
                local_var_params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `list_loan_repayments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in local_var_params:
            path_params['loan_id'] = local_var_params['loan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'api_sign', 'api_timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/margin/loans/{loan_id}/repayment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Repayment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_loans(self, status, side, **kwargs):  # noqa: E501
        """List all loans  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_loans(status, side, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Loan status (required)
        :param str side: Lend or borrow (required)
        :param str currency: Retrieved specified currency related data
        :param str currency_pair: Currency pair
        :param str sort_by: Specify which field is used to sort. `create_time` or `rate` is supported. Default to `create_time`
        :param bool reverse_sort: Whether to sort in descending order. Default to `true`
        :param int page: Page number
        :param int limit: Maximum number of record returned in one list
        :return: list[Loan]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_loans_with_http_info(status, side, **kwargs)  # noqa: E501
        else:
            (data) = self.list_loans_with_http_info(status, side, **kwargs)  # noqa: E501
            return data

    def list_loans_with_http_info(self, status, side, **kwargs):  # noqa: E501
        """List all loans  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_loans_with_http_info(status, side, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Loan status (required)
        :param str side: Lend or borrow (required)
        :param str currency: Retrieved specified currency related data
        :param str currency_pair: Currency pair
        :param str sort_by: Specify which field is used to sort. `create_time` or `rate` is supported. Default to `create_time`
        :param bool reverse_sort: Whether to sort in descending order. Default to `true`
        :param int page: Page number
        :param int limit: Maximum number of record returned in one list
        :return: list[Loan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['status', 'side', 'currency', 'currency_pair', 'sort_by', 'reverse_sort', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_loans" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'status' is set
        if ('status' not in local_var_params or
                local_var_params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `list_loans`")  # noqa: E501
        # verify the required parameter 'side' is set
        if ('side' not in local_var_params or
                local_var_params['side'] is None):
            raise ValueError("Missing the required parameter `side` when calling `list_loans`")  # noqa: E501

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `list_loans`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_loans`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_loans`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in local_var_params:
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'side' in local_var_params:
            query_params.append(('side', local_var_params['side']))  # noqa: E501
        if 'currency' in local_var_params:
            query_params.append(('currency', local_var_params['currency']))  # noqa: E501
        if 'currency_pair' in local_var_params:
            query_params.append(('currency_pair', local_var_params['currency_pair']))  # noqa: E501
        if 'sort_by' in local_var_params:
            query_params.append(('sort_by', local_var_params['sort_by']))  # noqa: E501
        if 'reverse_sort' in local_var_params:
            query_params.append(('reverse_sort', local_var_params['reverse_sort']))  # noqa: E501
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'api_sign', 'api_timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/margin/loans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Loan]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_margin_accounts(self, **kwargs):  # noqa: E501
        """Margin account list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_margin_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency_pair: Currency pair
        :return: list[MarginAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_margin_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_margin_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_margin_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Margin account list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_margin_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency_pair: Currency pair
        :return: list[MarginAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['currency_pair']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_margin_accounts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'currency_pair' in local_var_params:
            query_params.append(('currency_pair', local_var_params['currency_pair']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'api_sign', 'api_timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/margin/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MarginAccount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_margin_currency_pairs(self, **kwargs):  # noqa: E501
        """List all supported currency pairs supported in margin trading  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_margin_currency_pairs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MarginCurrencyPair]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_margin_currency_pairs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_margin_currency_pairs_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_margin_currency_pairs_with_http_info(self, **kwargs):  # noqa: E501
        """List all supported currency pairs supported in margin trading  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_margin_currency_pairs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MarginCurrencyPair]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_margin_currency_pairs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/margin/currency_pairs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MarginCurrencyPair]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def merge_loans(self, currency, ids, **kwargs):  # noqa: E501
        """Merge multiple lending loans  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merge_loans(currency, ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Retrieved specified currency related data (required)
        :param str ids: Lending loan ID list separated by `,`. Maximum of 20 IDs are allowed in one request (required)
        :return: Loan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.merge_loans_with_http_info(currency, ids, **kwargs)  # noqa: E501
        else:
            (data) = self.merge_loans_with_http_info(currency, ids, **kwargs)  # noqa: E501
            return data

    def merge_loans_with_http_info(self, currency, ids, **kwargs):  # noqa: E501
        """Merge multiple lending loans  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merge_loans_with_http_info(currency, ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Retrieved specified currency related data (required)
        :param str ids: Lending loan ID list separated by `,`. Maximum of 20 IDs are allowed in one request (required)
        :return: Loan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['currency', 'ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method merge_loans" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'currency' is set
        if ('currency' not in local_var_params or
                local_var_params['currency'] is None):
            raise ValueError("Missing the required parameter `currency` when calling `merge_loans`")  # noqa: E501
        # verify the required parameter 'ids' is set
        if ('ids' not in local_var_params or
                local_var_params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `merge_loans`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'currency' in local_var_params:
            query_params.append(('currency', local_var_params['currency']))  # noqa: E501
        if 'ids' in local_var_params:
            query_params.append(('ids', local_var_params['ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'api_sign', 'api_timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/margin/merged_loans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Loan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repay_loan(self, loan_id, repay_request, **kwargs):  # noqa: E501
        """Repay a loan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repay_loan(loan_id, repay_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_id: Loan ID (required)
        :param RepayRequest repay_request: (required)
        :return: Loan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repay_loan_with_http_info(loan_id, repay_request, **kwargs)  # noqa: E501
        else:
            (data) = self.repay_loan_with_http_info(loan_id, repay_request, **kwargs)  # noqa: E501
            return data

    def repay_loan_with_http_info(self, loan_id, repay_request, **kwargs):  # noqa: E501
        """Repay a loan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repay_loan_with_http_info(loan_id, repay_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_id: Loan ID (required)
        :param RepayRequest repay_request: (required)
        :return: Loan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['loan_id', 'repay_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repay_loan" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in local_var_params or
                local_var_params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `repay_loan`")  # noqa: E501
        # verify the required parameter 'repay_request' is set
        if ('repay_request' not in local_var_params or
                local_var_params['repay_request'] is None):
            raise ValueError("Missing the required parameter `repay_request` when calling `repay_loan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in local_var_params:
            path_params['loan_id'] = local_var_params['loan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'repay_request' in local_var_params:
            body_params = local_var_params['repay_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'api_sign', 'api_timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/margin/loans/{loan_id}/repayment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Loan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_loan(self, loan_id, loan_patch, **kwargs):  # noqa: E501
        """Modify a loan  # noqa: E501

        Only `auto_renew` modification is supported currently  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_loan(loan_id, loan_patch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_id: Loan ID (required)
        :param LoanPatch loan_patch: (required)
        :return: Loan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_loan_with_http_info(loan_id, loan_patch, **kwargs)  # noqa: E501
        else:
            (data) = self.update_loan_with_http_info(loan_id, loan_patch, **kwargs)  # noqa: E501
            return data

    def update_loan_with_http_info(self, loan_id, loan_patch, **kwargs):  # noqa: E501
        """Modify a loan  # noqa: E501

        Only `auto_renew` modification is supported currently  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_loan_with_http_info(loan_id, loan_patch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_id: Loan ID (required)
        :param LoanPatch loan_patch: (required)
        :return: Loan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['loan_id', 'loan_patch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_loan" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'loan_id' is set
        if ('loan_id' not in local_var_params or
                local_var_params['loan_id'] is None):
            raise ValueError("Missing the required parameter `loan_id` when calling `update_loan`")  # noqa: E501
        # verify the required parameter 'loan_patch' is set
        if ('loan_patch' not in local_var_params or
                local_var_params['loan_patch'] is None):
            raise ValueError("Missing the required parameter `loan_patch` when calling `update_loan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_id' in local_var_params:
            path_params['loan_id'] = local_var_params['loan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'loan_patch' in local_var_params:
            body_params = local_var_params['loan_patch']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'api_sign', 'api_timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/margin/loans/{loan_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Loan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_loan_record(self, loan_record_id, loan_patch, **kwargs):  # noqa: E501
        """Modify a loan record  # noqa: E501

        Only `auto_renew` modification is supported currently  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_loan_record(loan_record_id, loan_patch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_record_id: Loan record ID (required)
        :param LoanPatch loan_patch: (required)
        :return: LoanRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_loan_record_with_http_info(loan_record_id, loan_patch, **kwargs)  # noqa: E501
        else:
            (data) = self.update_loan_record_with_http_info(loan_record_id, loan_patch, **kwargs)  # noqa: E501
            return data

    def update_loan_record_with_http_info(self, loan_record_id, loan_patch, **kwargs):  # noqa: E501
        """Modify a loan record  # noqa: E501

        Only `auto_renew` modification is supported currently  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_loan_record_with_http_info(loan_record_id, loan_patch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_record_id: Loan record ID (required)
        :param LoanPatch loan_patch: (required)
        :return: LoanRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['loan_record_id', 'loan_patch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_loan_record" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'loan_record_id' is set
        if ('loan_record_id' not in local_var_params or
                local_var_params['loan_record_id'] is None):
            raise ValueError("Missing the required parameter `loan_record_id` when calling `update_loan_record`")  # noqa: E501
        # verify the required parameter 'loan_patch' is set
        if ('loan_patch' not in local_var_params or
                local_var_params['loan_patch'] is None):
            raise ValueError("Missing the required parameter `loan_patch` when calling `update_loan_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'loan_record_id' in local_var_params:
            path_params['loan_record_id'] = local_var_params['loan_record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'loan_patch' in local_var_params:
            body_params = local_var_params['loan_patch']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'api_sign', 'api_timestamp']  # noqa: E501

        return self.api_client.call_api(
            '/margin/loan_records/{loan_record_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoanRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
