# coding: utf-8

"""
    Gate API v4

    APIv4 futures provides all sorts of futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@mail.gate.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FuturesErrorResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'label': 'str',
        'message': 'str'
    }

    attribute_map = {
        'label': 'label',
        'message': 'message'
    }

    def __init__(self, label=None, message=None):  # noqa: E501
        """FuturesErrorResponse - a model defined in OpenAPI"""  # noqa: E501

        self._label = None
        self._message = None
        self.discriminator = None

        if label is not None:
            self.label = label
        if message is not None:
            self.message = message

    @property
    def label(self):
        """Gets the label of this FuturesErrorResponse.  # noqa: E501

        错误标识符，错误描述如下：  请求参数或格式问题:  - INVALID_PARAM_VALUE: 参数输入值无效 - INVALID_REQUEST_BODY: 无效请求体 - MISSING_REQUIRED_PARAM: 缺少必选参数 - DUPLICATE_REQUEST: 请求过于频繁  认证相关:  - INVALID_CREDENTIALS: 认证接口缺少用户认证信息 - NO_FUTURES_ACCOUNT: 用户无期货账户  业务相关:  - NO_MATCHING: 没有匹配的对手单 - NO_MARKING_PRICE: 合约当前无标记价格 - CONTRACT_NOT_FOUND: 合约未找到 - NOT_FOUND: 请求路径不存在 - RISK_LIMIT_EXCEEDED: 委托超出风险限额 - INSUFFICIENT_BALANCE: 余额不足 - POTENTIAL_LIQUIDATION: 操作可能导致爆仓 - LEVERAGE_TOO_HIGH: 杠杆倍数设置过高 - LEVERAGE_TOO_LOW: 杠杆倍数设置过低 - ORDER_NOT_FOUND: 委托不存在 - ORDER_FINISHED: 订单已结束 - TOO_MANY_ORDERS: 过多未交易的挂单 - POSITION_NOT_FOUND: 合约无头寸信息 - POSITION_CROSS_MARGIN: 全仓不支持更新保证金 - POSITION_LOCKED: 头寸当前被锁定 - TOO_MUCH_CHANGE: 保证金超过可调范围 - RISK_LIMIT_NOT_MULTIPLE: 风险限额未按照步长调整 - RISK_LIMIT_TOO_HIGH: 超出最大风险限额 - RISK_LIMIT_TOO_lOW: 风险限额设置过低 - PRICE_TOO_DEVIATED: 下单价与标记价格相差过大 - SIZE_TOO_LARGE: 下单数量超过上限 - SIZE_TOO_SMALL: 下单数量不足下限 - LIQUIDATION_PRICE_EXCEEDED: 补仓时价格不能超过平仓价 - POSITION_IN_CLOSE: 仓位正在平仓 - POTENTIAL_BANKRUPTCY: 下单若成交，保证金无法弥补损失  服务异常： - SERVER_ERROR: 内部错误 - TOO_BUSY: 服务当前忙   # noqa: E501

        :return: The label of this FuturesErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this FuturesErrorResponse.

        错误标识符，错误描述如下：  请求参数或格式问题:  - INVALID_PARAM_VALUE: 参数输入值无效 - INVALID_REQUEST_BODY: 无效请求体 - MISSING_REQUIRED_PARAM: 缺少必选参数 - DUPLICATE_REQUEST: 请求过于频繁  认证相关:  - INVALID_CREDENTIALS: 认证接口缺少用户认证信息 - NO_FUTURES_ACCOUNT: 用户无期货账户  业务相关:  - NO_MATCHING: 没有匹配的对手单 - NO_MARKING_PRICE: 合约当前无标记价格 - CONTRACT_NOT_FOUND: 合约未找到 - NOT_FOUND: 请求路径不存在 - RISK_LIMIT_EXCEEDED: 委托超出风险限额 - INSUFFICIENT_BALANCE: 余额不足 - POTENTIAL_LIQUIDATION: 操作可能导致爆仓 - LEVERAGE_TOO_HIGH: 杠杆倍数设置过高 - LEVERAGE_TOO_LOW: 杠杆倍数设置过低 - ORDER_NOT_FOUND: 委托不存在 - ORDER_FINISHED: 订单已结束 - TOO_MANY_ORDERS: 过多未交易的挂单 - POSITION_NOT_FOUND: 合约无头寸信息 - POSITION_CROSS_MARGIN: 全仓不支持更新保证金 - POSITION_LOCKED: 头寸当前被锁定 - TOO_MUCH_CHANGE: 保证金超过可调范围 - RISK_LIMIT_NOT_MULTIPLE: 风险限额未按照步长调整 - RISK_LIMIT_TOO_HIGH: 超出最大风险限额 - RISK_LIMIT_TOO_lOW: 风险限额设置过低 - PRICE_TOO_DEVIATED: 下单价与标记价格相差过大 - SIZE_TOO_LARGE: 下单数量超过上限 - SIZE_TOO_SMALL: 下单数量不足下限 - LIQUIDATION_PRICE_EXCEEDED: 补仓时价格不能超过平仓价 - POSITION_IN_CLOSE: 仓位正在平仓 - POTENTIAL_BANKRUPTCY: 下单若成交，保证金无法弥补损失  服务异常： - SERVER_ERROR: 内部错误 - TOO_BUSY: 服务当前忙   # noqa: E501

        :param label: The label of this FuturesErrorResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID_PARAM_VALUE", "INVALID_REQUEST_BODY", "MISSING_REQUIRED_PARAM", "INVALID_CREDENTIALS", "NO_FUTURES_ACCOUNT", "DUPLICATE_REQUEST", "NO_MATCHING", "NO_MARKING_PRICE", "CONTRACT_NOT_FOUND", "NOT_FOUND", "RISK_LIMIT_EXCEEDED", "INSUFFICIENT_BALANCE", "POTENTIAL_LIQUIDATION", "LEVERAGE_TOO_HIGH", "LEVERAGE_TOO_LOW", "ORDER_NOT_FOUND", "ORDER_FINISHED", "TOO_MANY_ORDERS", "POSITION_NOT_FOUND", "POSITION_CROSS_MARGIN", "POSITION_LOCKED", "TOO_MUCH_CHANGE", "RISK_LIMIT_NOT_MULTIPLE", "RISK_LIMIT_TOO_HIGH", "RISK_LIMIT_TOO_lOW", "PRICE_TOO_DEVIATED", "SIZE_TOO_LARGE", "SIZE_TOO_SMALL", "LIQUIDATION_PRICE_EXCEEDED", "POSITION_IN_CLOSE", "SERVER_ERROR", "TOO_BUSY"]  # noqa: E501
        if label not in allowed_values:
            raise ValueError(
                "Invalid value for `label` ({0}), must be one of {1}"  # noqa: E501
                .format(label, allowed_values)
            )

        self._label = label

    @property
    def message(self):
        """Gets the message of this FuturesErrorResponse.  # noqa: E501

        详细错误描述。如果指定了 `Accept-Language` 请求头部，且支持指定语言，则描述信息会返回对应的语言   # noqa: E501

        :return: The message of this FuturesErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this FuturesErrorResponse.

        详细错误描述。如果指定了 `Accept-Language` 请求头部，且支持指定语言，则描述信息会返回对应的语言   # noqa: E501

        :param message: The message of this FuturesErrorResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FuturesErrorResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
